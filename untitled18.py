# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XmLgxHr95z41D6t-SP0sFGSXgo0lJeKD
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

dataset=pd.read_csv('kc_house_data.csv')
dataset.dtypes

dataset.isnull()
dataset=dataset.fillna(method='ffill')

dataset.head()
dataset.describe()

dataset.isnull()
dataset['date']=dataset['date'].str.replace('T','').astype(int)

x=dataset.iloc[:,1:21].values
y=dataset.iloc[:,-1].values
print(x)
print(y)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)
print("training data",x_train)
print("testing data",x_test)
print("training data y",y_train)
print("testing data y",y_test)

from sklearn import metrics
from sklearn.ensemble import RandomForestRegressor

reg = RandomForestRegressor()

reg.fit(x_train, y_train)

y_pred = reg.predict(x_train)

print('R^2:',metrics.r2_score(y_train, y_pred))
print('Adjusted R^2:',1 - (1-metrics.r2_score(y_train, y_pred))*(len(y_train)-1)/(len(y_train)-x_train.shape[1]-1))
print('MAE:',metrics.mean_absolute_error(y_train, y_pred))
print('MSE:',metrics.mean_squared_error(y_train, y_pred))
print('RMSE:',np.sqrt(metrics.mean_squared_error(y_train, y_pred)))

plt.scatter(y_train, y_pred)
plt.xlabel("Prices")
plt.ylabel("Predicted prices")
plt.title("Prices vs Predicted prices")
plt.show()

plt.scatter(y_pred,y_train-y_pred)
plt.title("Predicted vs residuals")
plt.xlabel("Predicted")
plt.ylabel("Residuals")
plt.show()

import seaborn as sns
iris=sns.load_dataset("iris")
iris.head()

correlation=iris.corr()
iris.corr()

sns.heatmap(correlation,cmap="RdYlGn",annot=True)

from sklearn.linear_model import LinearRegression
regressor=LinearRegression()
regressor.fit(x_train,y_train)
y_pred=regressor.predict(x_test)

from sklearn import metrics
from sklearn.metrics import mean_squared_error,r2_score
print('mean squared error:',mean_squared_error(y_test,y_pred))
print('Root Mean Squared Error:',np.sqrt(mean_squared_error(y_test,y_pred)))
print('r_2 statistics: %.2f'%r2_score(y_test,y_pred))

from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error

from sklearn.linear_model import Lasso
x_train,x_test,y_train,y_test = train_test_split(x,y,random_state = 3, test_size = 0.3)
lasso = Lasso(alpha = 0.1)
lasso.fit(x_train,y_train)
ridge_predict = lasso.predict(x_test)
print('Lasso score: ',lasso.score(x_test,y_test)*100)
print('Lasso coefficients: ',lasso.coef_)

from sklearn.ensemble import GradientBoostingRegressor
GBR = GradientBoostingRegressor(n_estimators=100, max_depth=4)

GBR.fit(x_train, y_train)

print("Accuracy --> ", GBR.score(x_test, y_test)*100)

